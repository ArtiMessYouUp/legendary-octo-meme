import pygame
from sys import exit
import random



class Player(pygame.sprite.Sprite):
    global player_surf
    def __init__(self):
        super().__init__()
        player_walk_1 = pygame.image.load('p1_stand.png').convert_alpha()
        player_walk_2 = pygame.image.load('p1_walk01.png').convert_alpha()
        self.player_walk = [player_walk_1, player_walk_2]
        self.player_index = 0
        self.player_jump =  pygame.image.load('p1_jump.png').convert_alpha()
        
        self.image = self.player_walk[self.player_index]
        self.rect = self.image.get_rect(midbottom = (80, 300))
        self.gravity = 0
        
        self.jump_sound = pygame.mixer.Sound('cartoon-jump-6462.mp3')
        self.jump_sound.set_volume(1)
        
    def player_input(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE] and self.rect.bottom >= 300:
            self.gravity = -20
            self.jump_sound.play()
            
            
    def apply_gravity(self):
        self.gravity += 1
        self.rect.y += self.gravity
        if self.rect.bottom >= 300:
            self.rect.bottom = 300
            
    def animation_state(self):
        if self.rect.bottom < 300:
            self.image = self.player_jump
        else:  
            self.player_index += 0.1
            if self.player_index >= len(self.player_walk):
                self.player_index = 0
            self.image = self.player_walk[int(self.player_index)]
                      
    def update(self):
        self.player_input()
        self.apply_gravity()
        self.animation_state()
    
class Obstacle(pygame.sprite.Sprite):
    def __init__(self, type):
        super().__init__()
        
        if type == 'fly':
            fly_frame_1 = pygame.image.load('flyFly1.png').convert_alpha()
            fly_frame_2 = pygame.image.load('flyFly2.png').convert_alpha()
            self.frames = [fly_frame_1, fly_frame_2]
            y_pos = 200
        else:
            snail_frame_1 = pygame.image.load('snailWalk1.png').convert_alpha()
            snail_frame_2 = pygame.image.load('snailWalk2.png').convert_alpha()
            self.frames = [snail_frame_1, snail_frame_2]
            y_pos = 300
        
        self.animation_index = 0    
        self.image = self.frames[self.animation_index]
        self.image = self.frames[self.animation_index]
        self.rect = self.image.get_rect(midbottom = (random.randint(900, 1100), y_pos))
       
        
    def animation_state(self):
        self.animation_index += 0.1
        if self.animation_index >= len(self.frames):
            self.animation_index = 0
        self.image = self.frames[int(self.animation_index)]
    
    def update(self):
        self.animation_state()
        self.rect.x -= 6
        self.destroy()
        
    def destroy(self):
        if self.rect.x <= -100:
            self.kill()
           
def display_score():
    current_time = int(pygame.time.get_ticks() / 1000) - start_time
    score_surf = score_font.render(f'Score {current_time}', False, 'Black')
    score_rect = score_surf.get_rect(topleft = (20, 10))
    screen.blit(score_surf, score_rect)
    return current_time
             
def collision_sprite():
    if pygame.sprite.spritecollide(player.sprite, obstacle_group, False):
        obstacle_group.empty()
        return False
    else:
        return True

def timer():
    global obstacle_timer
    obstacle_timer = pygame.USEREVENT + 1
    pygame.time.set_timer(obstacle_timer, 1500)  

def end_game_screen():
        player_end_surf = pygame.image.load('p1_front.png').convert_alpha()
        player_end = pygame.transform.rotozoom(player_end_surf, 0, 2)
        player_end_rect = player_end.get_rect(center = (400,200))
        end_game_rect = end_game_text.get_rect(center = (400, 370))
        
        screen.fill((94, 129, 162)) 
        screen.blit(player_end, player_end_rect)
        screen.blit(end_game_text, end_game_rect)
        screen.blit(text_surf, (300, 30))
        #Reset player so on the ground 
        player_gravity = 0
        #shows ending score 
        end_score_text = score_font.render(f'Your score {score}', False, 'Black')
        end_score_rect = end_score_text.get_rect(center = (400, 330))
        if score == 0:
            screen.blit(end_game_text, end_game_rect)
        else:
            screen.blit(end_game_text, end_game_rect)
            screen.blit(end_score_text, end_score_rect)
        player = pygame.sprite.pygame.sprite.GroupSingle()
        player.add(Player())

        obstacle_group = pygame.sprite.Group()   
        
#Must call before running pygame code, it initializes pygame
pygame.init() 
#creating the display surface
screen = pygame.display.set_mode((800, 400))
pygame.display.set_caption('Runner')
clock = pygame.time.Clock()
title_font = pygame.font.Font('ugly.otf', 50)
score_font = pygame.font.Font('ugly.otf', 30)
game_active = True
start_time = 0
score = 0
bg_music = pygame.mixer.Sound('terror-ambience-7003.mp3')
bg_music.play()

#Groups
player = pygame.sprite.pygame.sprite.GroupSingle()
player.add(Player())

obstacle_group = pygame.sprite.Group()

#initializing surfaces
back_surf = pygame.image.load('bg_desert.png').convert()
ground_surf = pygame.image.load('ground.png').convert()
text_surf = title_font.render('Run Forest Run', False, 'Black')
end_game_text = score_font.render('Hit Spacebar to Restart', False, 'Black')

#timer
timer()

snail_animation_timer = pygame.USEREVENT + 2
pygame.time.set_timer(snail_animation_timer, 500)

fly_animation_timer = pygame.USEREVENT + 3
pygame.time.set_timer(fly_animation_timer, 200)

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quite
            exit()
        
        if game_active == False:
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                game_active = True
                start_time = int(pygame.time.get_ticks() / 1000)
                
        else:        
            if event.type == obstacle_timer:
                obstacle_group.add(Obstacle(random.choice(['fly', 'snail', 'snail']))) 
    
    #update everything
    if game_active:
        screen.blit(back_surf, (0,0))
        screen.blit(ground_surf, (0,300))
        screen.blit(text_surf, (300, 30)) 
        #screen.blit(snail_surf)
        score = display_score()
        
        player.draw(screen)
        player.update()
        obstacle_group.draw(screen)
        obstacle_group.update() 
         
        game_active = collision_sprite()     

    #End Game Screen 
    else:
        end_game_screen()
        
    pygame.display.update()
    clock.tick(60)
    #high score
    #loop music
    #dying sound
    #ducking